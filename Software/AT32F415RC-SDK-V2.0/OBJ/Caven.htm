<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Caven.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Caven.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Nov 28 23:49:13 2022
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Uart_Init &rArr; Uart1_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from at32f415_int.o(i.BusFault_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[20]">CAN1_SE_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3e]">CMP1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3f]">CMP2_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[44]">CRC16_CCITT_CalculateBuf</a> from check_crc16.o(i.CRC16_CCITT_CalculateBuf) referenced from api.o(i.API_Index)
 <LI><a href="#[f]">CRM_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from base_adc.o(i.DMA1_Channel1_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[39]">DMA2_Channel1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3a]">DMA2_Channel2_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel3_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[40]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from at32f415_int.o(i.DebugMon_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4e]">Debug_Out</a> from mode.o(i.Debug_Out) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[33]">ERTCAlarm_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[d]">ERTC_WKUP_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[10]">EXINT0_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[32]">EXINT15_10_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[11]">EXINT1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[12]">EXINT2_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[13]">EXINT3_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[14]">EXINT4_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[21]">EXINT9_5_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[48]">Find_Data</a> from data_handle.o(i.Find_Data) referenced from api.o(i.API_Index)
 <LI><a href="#[5c]">Get_Lose_Tiem</a> from mode_time.o(i.Get_Lose_Tiem) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[5a]">Get_TIME</a> from mode_time.o(i.Get_TIME) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[2]">HardFault_Handler</a> from at32f415_int.o(i.HardFault_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[45]">Hourly_to_Seconds</a> from time_handle.o(i.Hourly_to_Seconds) referenced from api.o(i.API_Index)
 <LI><a href="#[2a]">I2C1_ERR_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[29]">I2C1_EVT_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2c]">I2C2_ERR_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2b]">I2C2_EVT_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4d]">KEY_Init</a> from key.o(i.KEY_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[61]">KEY_State</a> from key.o(i.KEY_State) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[52]">LCD_Draw_Circle</a> from lcd.o(i.LCD_Draw_Circle) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[51]">LCD_Draw_Line</a> from lcd.o(i.LCD_Draw_Line) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[50]">LCD_Draw_Point</a> from lcd.o(i.LCD_Draw_Point) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[53]">LCD_Draw_Rectangle</a> from lcd.o(i.LCD_Draw_Rectangle) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[4f]">LCD_Fill</a> from lcd.o(i.LCD_Fill) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[49]">LCD_Init</a> from lcd.o(i.LCD_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[55]">LCD_Show_Chinese</a> from lcd.o(i.LCD_Show_Chinese) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[56]">LCD_Show_Picture</a> from lcd.o(i.LCD_Show_Picture) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[54]">LCD_Show_String</a> from lcd.o(i.LCD_Show_String) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[4c]">LED_Init</a> from led.o(i.LED_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[5e]">LED_REG</a> from led.o(i.LED_REG) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[5d]">LED_SET</a> from led.o(i.LED_SET) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[3]">MemManage_Handler</a> from at32f415_int.o(i.MemManage_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from at32f415_int.o(i.NMI_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3d]">OTGFS1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[34]">OTGFS1_WKUP_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[47]">Over_Time</a> from time_handle.o(i.Over_Time) referenced from api.o(i.API_Index)
 <LI><a href="#[b]">PVM_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from at32f415_int.o(i.PendSV_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[35]">SDIO1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from base_spi.o(i.SPI1_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from base_spi.o(i.SPI2_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from at32f415_int.o(i.SVC_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[59]">SYS_Delay_S</a> from base_sys_time.o(i.SYS_Delay_S) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[58]">SYS_Delay_ms</a> from base_sys_time.o(i.SYS_Delay_ms) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[57]">SYS_Delay_us</a> from base_sys_time.o(i.SYS_Delay_us) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[46]">Seconds_to_Hourly</a> from time_handle.o(i.Seconds_to_Hourly) referenced from api.o(i.API_Index)
 <LI><a href="#[5b]">Set_TIME</a> from mode_time.o(i.Set_TIME) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[9]">SysTick_Handler</a> from base_sys_time.o(i.SysTick_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4a]">Sys_Clock_Init</a> from mode_time.o(i.Sys_Clock_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[42]">SystemInit</a> from system_at32f415.o(i.SystemInit) referenced from startup_at32f415.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[22]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[25]">TMR1_CH_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[23]">TMR1_OVF_TMR10_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[24]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[26]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[27]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[28]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[36]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[37]">UART4_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[38]">UART5_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[5f]">UART_Send_Data</a> from mode_uart.o(i.UART_Send_Data) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[60]">UART_Send_String</a> from mode_uart.o(i.UART_Send_String) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from mode_uart.o(i.USART1_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from mode_uart.o(i.USART2_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from mode_uart.o(i.USART3_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4b]">Uart_Init</a> from mode_uart.o(i.Uart_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[5]">UsageFault_Handler</a> from at32f415_int.o(i.UsageFault_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[a]">WWDT_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[43]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f415.o(.text)
 <LI><a href="#[62]">fputc</a> from base_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[41]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[63]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e8]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[e9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ea]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTGFS1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SysTick
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ba]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_String
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ef]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[76]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[70]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>API_Index</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, api.o(i.API_Index))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_int.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>CRC16_CCITT_CalateByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, check_crc16.o(i.CRC16_CCITT_CalateByte))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_CCITT_CalculateBuf
</UL>

<P><STRONG><a name="[44]"></a>CRC16_CCITT_CalculateBuf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, check_crc16.o(i.CRC16_CCITT_CalculateBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_CCITT_CalculateBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_CCITT_CalateByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, base_adc.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DS18B20_Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ds18b20.o(i.DS18B20_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte
</UL>

<P><STRONG><a name="[7c]"></a>DS18B20_GPIO_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, base_exist_gpio.o(i.DS18B20_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DS18B20_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
</UL>

<P><STRONG><a name="[80]"></a>DS18B20_Get_Temp</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ds18b20.o(i.DS18B20_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DS18B20_Get_Temp &rArr; Write_Byte &rArr; DS18B20_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>DS18B20_IO_Config</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, base_exist_gpio.o(i.DS18B20_IO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DS18B20_IO_Config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte
</UL>

<P><STRONG><a name="[85]"></a>DS18B20_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DS18B20_Init &rArr; DS18B20_Get_Temp &rArr; Write_Byte &rArr; DS18B20_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Delay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f415_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Debug_Out</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mode.o(i.Debug_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Debug_Out &rArr; UART_Send_String &rArr; UART_Send_Data &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[48]"></a>Find_Data</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, data_handle.o(i.Find_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Find_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[87]"></a>GET_SysTick</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, base_sys_time.o(i.GET_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GET_SysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_us
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
</UL>

<P><STRONG><a name="[5c]"></a>Get_Lose_Tiem</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mode_time.o(i.Get_Lose_Tiem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Get_Lose_Tiem &rArr; Get_TIME &rArr; Set_TIME &rArr; SET_SysTick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[5a]"></a>Get_TIME</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, mode_time.o(i.Get_TIME))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_TIME &rArr; Set_TIME &rArr; SET_SysTick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_SysTick
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seconds_to_Hourly
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TIME
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Lose_Tiem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_int.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>Hourly_to_Seconds</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, time_handle.o(i.Hourly_to_Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Hourly_to_Seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Over_Time
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[88]"></a>KEY_GPIO_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, base_exist_gpio.o(i.KEY_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[4d]"></a>KEY_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KEY_Init &rArr; KEY_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[61]"></a>KEY_State</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, key.o(i.KEY_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_State
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[89]"></a>LCD_Address_Set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcd.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Picture
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Char
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>

<P><STRONG><a name="[52]"></a>LCD_Draw_Circle</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lcd.o(i.LCD_Draw_Circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_Draw_Circle &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[51]"></a>LCD_Draw_Line</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, lcd.o(i.LCD_Draw_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Draw_Line &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Rectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[50]"></a>LCD_Draw_Point</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(i.LCD_Draw_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Char
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Line
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[53]"></a>LCD_Draw_Rectangle</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lcd.o(i.LCD_Draw_Rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_Draw_Rectangle &rArr; LCD_Draw_Line &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[4f]"></a>LCD_Fill</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[8c]"></a>LCD_GPIO_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, base_exist_gpio.o(i.LCD_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[49]"></a>LCD_Init</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_Init &rArr; LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_CMD
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[90]"></a>LCD_Show_Char</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, lcd.o(i.LCD_Show_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_Show_Char &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_String
</UL>

<P><STRONG><a name="[55]"></a>LCD_Show_Chinese</STRONG> (Thumb, 88 bytes, Stack size 44 bytes, lcd.o(i.LCD_Show_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Show_Chinese &rArr; LCD_Show_Chinese32x32
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Chinese32x32
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Chinese24x24
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[91]"></a>LCD_Show_Chinese24x24</STRONG> (Thumb, 8 bytes, Stack size 16 bytes, lcd.o(i.LCD_Show_Chinese24x24))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Show_Chinese24x24
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Chinese
</UL>

<P><STRONG><a name="[92]"></a>LCD_Show_Chinese32x32</STRONG> (Thumb, 8 bytes, Stack size 16 bytes, lcd.o(i.LCD_Show_Chinese32x32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Show_Chinese32x32
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Chinese
</UL>

<P><STRONG><a name="[56]"></a>LCD_Show_Picture</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lcd.o(i.LCD_Show_Picture))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_Show_Picture &rArr; LCD_Writ_String &rArr; SPI_Send_String &rArr; SPI2_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_String
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[54]"></a>LCD_Show_String</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lcd.o(i.LCD_Show_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_Show_String &rArr; LCD_Show_Char &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[8a]"></a>LCD_WR_CMD</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_CMD &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[8b]"></a>LCD_WR_DATA</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Char
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[8f]"></a>LCD_WR_DATA8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_DATA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_DATA8 &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[95]"></a>LCD_Writ_Bus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.LCD_Writ_Bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_CMD
</UL>

<P><STRONG><a name="[93]"></a>LCD_Writ_String</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd.o(i.LCD_Writ_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Writ_String &rArr; SPI_Send_String &rArr; SPI2_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_String
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Picture
</UL>

<P><STRONG><a name="[98]"></a>LED_GPIO_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, base_exist_gpio.o(i.LED_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[4c]"></a>LED_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LED_Init &rArr; LED_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[5e]"></a>LED_REG</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(i.LED_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LED_REG &rArr; WS2812_write_byte &rArr; WS2812_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[5d]"></a>LED_SET</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, led.o(i.LED_SET))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[9a]"></a>Main_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, main.o(i.Main_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Main_Init &rArr; system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Index
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Index
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_int.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>Mode_Index</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mode.o(i.Mode_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mode_Index
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_User_index
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f415_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>Over_Time</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, time_handle.o(i.Over_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Over_Time &rArr; Hourly_to_Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hourly_to_Seconds
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f415_int.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Read_Byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ds18b20.o(i.Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Read_Byte &rArr; DS18B20_IO_Config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Delay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[a0]"></a>SET_SysTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, base_sys_time.o(i.SET_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SET_SysTick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TIME
</UL>

<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, base_spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>SPI2_DMA_Config</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, base_spi.o(i.SPI2_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_String
</UL>

<P><STRONG><a name="[a6]"></a>SPI2_GPIO_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, base_spi.o(i.SPI2_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI2_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, base_spi.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>SPI_CS_Set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, base_spi.o(i.SPI_CS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_String
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_CMD
</UL>

<P><STRONG><a name="[96]"></a>SPI_Send_DATA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, base_spi.o(i.SPI_Send_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>

<P><STRONG><a name="[97]"></a>SPI_Send_String</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, base_spi.o(i.SPI_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_Send_String &rArr; SPI2_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_String
</UL>

<P><STRONG><a name="[8d]"></a>SPI_Start_Init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, base_spi.o(i.SPI_Start_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI_Start_Init &rArr; SPI2_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_transmitter_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_default_para_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f415_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SYS_Delay_S</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, base_sys_time.o(i.SYS_Delay_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SYS_Delay_S &rArr; SYS_Delay_ms &rArr; GET_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[58]"></a>SYS_Delay_ms</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, base_sys_time.o(i.SYS_Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_Delay_ms &rArr; GET_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_SysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[57]"></a>SYS_Delay_us</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, base_sys_time.o(i.SYS_Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_Delay_us &rArr; GET_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_SysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[46]"></a>Seconds_to_Hourly</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, time_handle.o(i.Seconds_to_Hourly))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Seconds_to_Hourly
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[5b]"></a>Set_TIME</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mode_time.o(i.Set_TIME))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Set_TIME &rArr; SET_SysTick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SysTick
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hourly_to_Seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, base_sys_time.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Sys_Clock_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mode_time.o(i.Sys_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_Clock_Init &rArr; Sys_Time_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Time_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[b1]"></a>Sys_Time_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, base_sys_time.o(i.Sys_Time_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sys_Time_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clock_Init
</UL>

<P><STRONG><a name="[42]"></a>SystemInit</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, system_at32f415.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>UART_RXD_Flag</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, base_uart.o(i.UART_RXD_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RXD_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>UART_RXD_Flag_Clear</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, base_uart.o(i.UART_RXD_Flag_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RXD_Flag_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>UART_RXD_Receive</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, base_uart.o(i.UART_RXD_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RXD_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>UART_Send_Data</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mode_uart.o(i.UART_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Send_Data &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[60]"></a>UART_Send_String</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mode_uart.o(i.UART_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Send_String &rArr; UART_Send_Data &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[b9]"></a>UART_TXD_Send</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, base_uart.o(i.UART_TXD_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mode_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; UART_RXD_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Receive
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag_Clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RXD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mode_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; UART_RXD_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Receive
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag_Clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RXD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mode_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; UART_RXD_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Receive
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag_Clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RXD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>Uart1_Init</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, base_uart.o(i.Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart1_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[c5]"></a>Uart2_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, base_uart.o(i.Uart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart2_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[c6]"></a>Uart3_Init</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, base_uart.o(i.Uart3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart3_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[c8]"></a>Uart4_Init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, base_uart.o(i.Uart4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[4b]"></a>Uart_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mode_uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Uart_Init &rArr; Uart1_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_int.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>WS2812_Delay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.WS2812_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WS2812_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_write_byte
</UL>

<P><STRONG><a name="[99]"></a>WS2812_write_byte</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, led.o(i.WS2812_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WS2812_write_byte &rArr; WS2812_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_REG
</UL>

<P><STRONG><a name="[81]"></a>Write_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ds18b20.o(i.Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Write_Byte &rArr; DS18B20_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GPIO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[ca]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f4]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[f5]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f6]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[dd]"></a>crm_ahb_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[df]"></a>crm_apb1_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[de]"></a>crm_apb2_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[e0]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_auto_step_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[da]"></a>crm_clock_source_enable</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d1]"></a>crm_clocks_freq_get</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, at32f415_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[db]"></a>crm_flag_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at32f415_crm.o(i.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d4]"></a>crm_hick_divider_select</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_hick_divider_select))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_sclk_frequency_select
</UL>

<P><STRONG><a name="[d3]"></a>crm_hick_sclk_frequency_select</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, at32f415_crm.o(i.crm_hick_sclk_frequency_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_hick_sclk_frequency_select
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_divider_select
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
</UL>

<P><STRONG><a name="[7e]"></a>crm_periph_clock_enable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f415_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GPIO_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[d8]"></a>crm_periph_reset</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f415_crm.o(i.crm_periph_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_reset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
</UL>

<P><STRONG><a name="[dc]"></a>crm_pll_config</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, at32f415_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d9]"></a>crm_reset</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[e1]"></a>crm_sysclk_switch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d2]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>

<P><STRONG><a name="[e2]"></a>crm_usb_clock_div_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_usb_clock_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d5]"></a>crm_usb_clock_source_select</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at32f415_crm.o(i.crm_usb_clock_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_usb_clock_source_select &rArr; crm_hick_sclk_frequency_select
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_sclk_frequency_select
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[a8]"></a>dma_channel_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_dma.o(i.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_String
</UL>

<P><STRONG><a name="[a4]"></a>dma_default_para_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f415_dma.o(i.dma_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_Config
</UL>

<P><STRONG><a name="[7b]"></a>dma_flag_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f415_dma.o(i.dma_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>dma_flag_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, at32f415_dma.o(i.dma_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>dma_init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, at32f415_dma.o(i.dma_init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_Config
</UL>

<P><STRONG><a name="[af]"></a>dma_reset</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, at32f415_dma.o(i.dma_reset))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[62]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, base_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[7d]"></a>gpio_default_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f415_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GPIO_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[7f]"></a>gpio_init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, at32f415_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GPIO_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[86]"></a>gpio_input_data_bit_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_gpio.o(i.gpio_input_data_bit_read))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State
</UL>

<P><STRONG><a name="[c7]"></a>gpio_pin_remap_config</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, at32f415_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
</UL>

<P><STRONG><a name="[41]"></a>main</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; Main_Init &rArr; system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_String
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ac]"></a>nvic_irq_enable</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, at32f415_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[ab]"></a>nvic_priority_group_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f415_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[aa]"></a>spi_default_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[b0]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[a7]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_DATA
</UL>

<P><STRONG><a name="[ae]"></a>spi_i2s_dma_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_i2s_dma_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[a1]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_DATA
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_String
</UL>

<P><STRONG><a name="[a2]"></a>spi_i2s_interrupt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_i2s_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_String
</UL>

<P><STRONG><a name="[a9]"></a>spi_i2s_reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at32f415_spi.o(i.spi_i2s_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_i2s_reset &rArr; crm_periph_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[ad]"></a>spi_init</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[9b]"></a>system_clock_config</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, at32f415_clock.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_div_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[e3]"></a>system_core_clock_update</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, system_at32f415.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[b2]"></a>systick_clock_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f415_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Time_Init
</UL>

<P><STRONG><a name="[b8]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Receive
</UL>

<P><STRONG><a name="[bb]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
</UL>

<P><STRONG><a name="[c4]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[b6]"></a>usart_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag_Clear
</UL>

<P><STRONG><a name="[b4]"></a>usart_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag
</UL>

<P><STRONG><a name="[bf]"></a>usart_init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, at32f415_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[c3]"></a>usart_interrupt_enable</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, at32f415_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[c2]"></a>usart_parity_selection_config</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_parity_selection_config))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[c1]"></a>usart_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[be]"></a>usart_reset</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, at32f415_usart.o(i.usart_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_reset &rArr; crm_periph_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[c0]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8e]"></a>LCD_Delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(i.LCD_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[9f]"></a>Mode_User_index</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, mode.o(i.Mode_User_index))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Index
</UL>

<P><STRONG><a name="[bc]"></a>Get_RXD</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mode_uart.o(i.Get_RXD))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cb]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[cf]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ce]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
